using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using static GlobalData.Damage;

public class VulnerabilityDebuff : StatusEffect
{
    [Header("Function")]
    public DamageType type;
    public ElementalAspect elementalAspect;
    public PhysicalAspect physicalAspect;
    public float damageModifier = 1.2f;

    public override void OnApplication(CharacterState state)
    {
        if (uniqueTag != 0)
        {
            state.AddDamageModifier(damageModifier, $"{data.statusName}_{uniqueTag}", type, elementalAspect, physicalAspect);
        }
        else
        {
            state.AddDamageModifier(damageModifier, data.statusName, type, elementalAspect, physicalAspect);
        }
    }

    public override void OnExpire(CharacterState state)
    {
        if (uniqueTag != 0)
        {
            state.RemoveDamageModifier($"{data.statusName}_{uniqueTag}", type, elementalAspect, physicalAspect);
        }
        else
        {
            state.RemoveDamageModifier(data.statusName, type, elementalAspect, physicalAspect);
        }
        base.OnExpire(state);
    }

    public override void OnCleanse(CharacterState state)
    {
        if (uniqueTag != 0)
        {
            state.RemoveDamageModifier($"{data.statusName}_{uniqueTag}", type, elementalAspect, physicalAspect);
        }
        else
        {
            state.RemoveDamageModifier(data.statusName, type, elementalAspect, physicalAspect);
        }
        base.OnCleanse(state);
    }
}
